c
match_data.captures
match_data.names
route_params
match_data
q
qy
match_data.captures
match_data.names
route_params
match_data
c
proc
&proc
q
res
req
q
@routes
req.request_method
req.http_method
req
c
q
@routes[0].http_method
@routes[0]
@routes[1]
@routes
req.request_method
req.route
req
req.method
req.route
req
quit
action_name
actions_name
controller_class
controller
pattern
method
quit
bee == nil
bee == true
bbb == true
aaa == true
aaa && bee
bee
"b" if (pattern =~ req.path) 
(pattern =~ req.path)
pattern =~ req.path == false
pattern =~ req.path
pattern
bbb
aaa
quit
b ?
b
a
c
return true if a
"4" ?
a ?
a == truthy
a == true
a
c
x
c
a
quit
req.request_method.downcase.to_sym == http_method
request_method.downcase.to_sym == http_method
request_method.downcase == http_method
(req.request_method =~ http_method)
http_method
req.request_method
(req.request_method == http_method)
a
quit
pattern =~ 'sdf'
pattern =~ req.path
pattern == req.path
pattern =~ req.path
pattern
req.path
req
c
quit
quit y
quit
c
ERB.new(contents).result
ERB.new(contents)
contents
c
contents
q
quit
@cookies
@cookies = c ? JSON.parse(c) : {}
@cookies
c = nil
@cookies
quit
JSON.parse(nil)
JSON.parse()
a = _
req.cookies['aaa']
req.cookies['_rails_lite_app']
JSON.parse(req.cookies)
req.cookies
c
cookies = req.cookies ? JSON.prase(req.cookies) : {}
c
cookies
cookies = req.cookies ? req.cookies.to_json : {}
req.cookies == true
req.cookies === true
req.cookies ?
req.cookies
req
c
req.cookies.to_json
req.cookies
req.env
req.rack
req
c
path
c
path
c
self.class.to_s
self.class
self
c
Activesupport.underscore("ActiveModel")
ActiveSupport.underscore("ActiveModel")
underscore("ActiveModel")
"testsets test".underscore
c
res.headers['content-type']
res.headers
res['content-type']
res
